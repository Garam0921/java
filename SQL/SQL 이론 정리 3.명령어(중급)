● SQL 명령어(중급)

<join>

-- join이란 두개 이상의 테이블을 연결하여 데이터를 검색하는 방법
/*
<join의 종류
cross join
inner join
outer join
self join
*/
-- 크로스 조인 : 한쪽 테이블의 각 행마다 다른 쪽 테이블의 모든 행이 한번씩
-- 매칭되는 조인을 의미
select 부서.부서번호, 부서명, 이름, 사원.부서번호 from 부서
cross join 사원
where 이름 = '배재용';


-- 내부조인(inner join) : 각 테이블에서 조인조건에 일치하는 데이터만 조인
-- '이소미'사원의 사원번호, 직위, 부서번호, 부서명
-- ANSI sql 조인
select 사원번호, 직위, 부서.부서번호, 부서명 from 사원
inner join 부서
on 사원.부서번호 = 부서.부서번호
where 이름 = '이소미';


-- NON-ANSI sql 조인 (위 방법과 결과는 같으나 문법이 다름)
select 사원번호, 직위, 부서.부서번호, 부서명 from 사원, 부서
where 사원.부서번호 = 부서.부서번호
and 이름 = '이소미';

-- 고객회사들이 주문한 주문건수를 많은 순서대로 보이시오
-- 컬럼은 고객번호, 담당자명, 고객회사명, 주문건수
select 고객.고객번호, 담당자명, 고객회사명,
	count(*) as 주문건수 from 고객
inner join 주문
on 고객.고객번호 = 주문.고객번호
group by 고객.고객번호, 담당자명, 고객회사명
order by count(*) desc; 


-- 고객별로 주문금액 합을 보이되, 주문금액 합이 많은 순서대로
-- 컬럼은 고객번호, 담당자명, 고객회사명, 주문금액합
-- inner join 여러개일때 순서는 상관없음

-- ANSI 스타일
select 고객.고객번호, 담당자명, 고객회사명, sum(단가*주문수량) as 주문금액합 from 고객
inner join 주문
on 고객.고객번호 = 주문.고객번호 
inner join 주문세부
on 주문.주문번호 = 주문세부.주문번호 
group by 고객.고객번호, 담당자명, 고객회사명
order by 주문금액합 desc; -- 4, sum(단가*주문수량), 주문금액합


-- NON-ANSI 스타일
select 고객.고객번호, 담당자명, 고객회사명, sum(단가*주문수량) as 주문금액합 from 고객, 주문, 주문세부
where 고객.고객번호 = 주문.고객번호 
and 주문.주문번호 = 주문세부.주문번호 
group by 고객.고객번호, 담당자명, 고객회사명
order by 주문금액합 desc; -- 4, sum(단가*주문수량), 주문금액합



-- 모든 사원의 사원번호, 이름, 부서명 표시
select 사원.사원번호, 이름, 부서명 from 사원
inner join 부서
on 사원.부서번호 = 부서.부서번호;

select 사원번호, 이름, 부서명 from 사원
inner join 부서
on 사원.부서번호 = 부서.부서번호;



-- 주문번호 'H0255'의 제품명과 주문수량, 단가 표시
select 주문번호, 제품명, 주문수량, 주문세부.단가 from 주문세부
inner join 제품
on 제품.제품번호 = 주문세부.제품번호 
where 주문세부.주문번호 = 'H0255';



-- Non-Equi Join : =연산자가 아닌 부등호 비교연산자를 이용한 조인
select 고객번호, 고객회사명, 담당자명, 마일리지, 등급명 from 고객
inner join 마일리지등급
on 마일리지 >= 하한마일리지
and 마일리지 <= 상한마일리지
where 담당자명 = '이은광';


	
--  외부조인(Outer Join) 
-- 사원중에 부서배치가 되지 않은 사원이 누군지 확인가능
-- outer 키워드는 생략 가능
select 사원번호, 이름, 부서명 
from 사원 left outer join 부서
on 사원.부서번호 = 부서.부서번호 ;

-- 부서중에 사원이 소속되어있지 않은 부서를 확인 가능
select 사원번호, 이름, 부서명 
from 사원 right outer join 부서
on 사원.부서번호 = 부서.부서번호 ;

-- 부서중에 사원이 소속되어있지 않은 부서를 확인 가능
select 사원번호, 이름, 부서명 
from 사원 right join 부서
on 사원.부서번호 = 부서.부서번호 ;


-- 상사가 없는 지원까지 포함된 데이터를 요구할 경우 사용
-- 셀프조인 : 동일한 테이블안에서 한 컬럼이 다른 컬럼을 참조하는 경우에 사용
-- 마치 동일한 테이블을 다른 테이블인것처럼 조인시키는 방법
select 사원.사원번호,
	사원.이름,
	사원.상사번호 as '상사의 사원번호',
	상사.이름 as '상사의 이름'
from 사원
inner join 사원 as 상사
on 사원.상사번호  = 상사.사원번호;


select 사원.사원번호,
	사원.이름,
	사원.상사번호 as '상사의 사원번호',
	상사.이름 as '상사의 이름'
from 사원 left join 사원 as 상사
on 사원.상사번호  = 상사.사원번호;


=== 조인 연습문제 있음 ==

 
<서브쿼리 (SubQuery)>
sql문 내부에서 사용하녀 select문을 의미함
장점: 복잡한 데이터추출 및 조작작업에 유용하며 유연성과 기능확장에 도움이 됨
단점: 지나치게 복잡한 서브쿼리를 사용하면 성능을 저하시킬 수 있음 

최고의 마일리지를 보유한 고객은 누구?

select 고객번호, 고객회사명, 담당자명, 마일리지 from 고객
where 마일리지 = (select max(마일리지) from 고객);

주문번호 'H0250'을 주문한 고객의 고객회사명과 담당자명
-- 1. 단일 행 서브쿼리 사용 예
select 고객회사명, 담당자명 from 고객
where 고객번호 = (select 고객번호 from 주문
			 where 주문번호 = 'H0250');

-- 서브쿼리 대신 inner join 사용 예			
select 고객회사명, 담당자명 from 고객
inner join 주문
on 고객.고객번호 = 주문.고객번호 
where 주문번호 ='H0250';



-- 2. 복수(멀티) 행 서브쿼리
'부산광역시'고객이 주문한 주문건수

select count(*) as 주문건수 from 주문
where 고객번호 in (select 고객번호 from 고객
                 where 도시 = '부산광역시');
                
 
-- '부산광역시' 전체고객의 마일리지보다 마일리지가 큰 고객의 정보
-- 서브쿼리의 결과값중 어느 하나보다만 커도 선택됨
select 담당자명, 고객회사명, 마일리지 from 고객
where 마일리지 > any (select 마일리지 from 고객
               where 도시 = '부산광역시');
              

select 담당자명, 고객회사명, 마일리지 from 고객
where 마일리지 > all  (select  avg(마일리지) from 고객
               group by 지역);
              
         
-- 한 번이라도 주문한적이 있는 고객의 정보
              
select 고객번호, 담당자명, 고객회사명 from 고객
where exists (select * from 주문 where 고객.고객번호 = 주문.고객번호)

-- in (서브쿼리) 이용하여 동일한 결과 얻기
select  고객번호, 담당자명, 고객회사명 from 고객
where 고객번호 in (select 고객번호 from 주문);

select  고객번호, 담당자명, 고객회사명 from 고객
where 고객번호 in (select distinct 고객번호 from 주문)

-- join을 이용하여 동일한 결과 얻기
select  고객.고객번호, 담당자명, 고객회사명 from 고객
inner join 주문 on 고객.고객번호 = 주문.고객번호
group by 고객번호, 담당자명, 고객회사명;


select distinct 고객.고객번호, 담당자명, 고객회사명 from 고객
inner join 주문 on 고객.고객번호 = 주문.고객번호




<집계함수>

-- count 데이터 열의 갯수를 세는 함수(null은 제외)
select count(*),
	count(고객번호),
	count(도시),
	count(지역)
from 고객;
select * from 고객;

-- sum 합계
-- avg 평균
-- min 최소값
-- max 최대값
select sum(마일리지),
	avg(마일리지),
	min(마일리지),
	max(마일리지)
from 고객;

-- group by 그룹별로 묶어주는 명령어(중요!!)
select 도시,
	count(*) as 고객수,
	avg(마일리지) as 평균마일리지
from 고객
group by 도시;

select 담당자직위,
	도시,
	count(*) as 고객수,
	avg(마일리지) as 평균마일리지
from 고객
group by 담당자직위, 도시
order by 담당자직위, 도시;

-- having
select 도시,
	count(*) as 고객수,
	avg(마일리지) as 평균마일리지
from 고객
group by 도시
having count(*) >= 4;

select 도시,
	sum(마일리지)
from 고객
where 고객번호 like 'T%'-- where는 select에 지정된 컬럼이외도 사용가능
group by 도시
having sum(마일리지) >= 1000;-- having은 select에 지정된 컬럼만 사용 

-- with rollup 그룹별 소계와 전체 총계를 표시
select 도시,
	count(*) as 고객수,
	avg(마일리지) as 평균마일리지
from 고객
group by 도시
with rollup; -- 고객수 총계

select 담당자직위,
	도시,
	count(*) as 고객수
from 고객
group by 담당자직위, 도시
with rollup; -- 담당자직위별 소계 + 총계

-- group_concat 컬럼내의 값을 결합해서 표시
select 도시,
	group_concat(고객회사명) as 고객회사명목록
from 고객
group by 도시;
